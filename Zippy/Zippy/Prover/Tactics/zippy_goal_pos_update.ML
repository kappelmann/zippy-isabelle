(*  Title:      HOCLP/zippy_goal_pos_update.ML
    Author:     Kevin Kappelmann
*)
signature ZIPPY_GPOS_UPDATE_TARGET =
sig
  datatype 't target = Target of 't list
  val empty : 't target
  val target : 't list -> 't target
  val map_list : ('t list -> 'u list) -> 't target -> 'u target
  include MONAD_BASE
  where type ('p1, 'a) t = 'a target
end

structure Zippy_GPos_Update_Target : ZIPPY_GPOS_UPDATE_TARGET =
struct
datatype 't target = Target of 't list
val empty = Target []
fun target x = Target x
fun dest_target (Target t) = t

fun map_list f (Target t) = target (f t)

type ('p1, 'a) t = 'a target
fun map f (Target t) = target (List.map f t)
fun pure x = Target [x]
fun bind (Target t) f = List.map (f #> dest_target) t |> flat |> target
fun f <*> x = bind f (fn f => map f x)
end

signature ZIPPY_GPOS_UPDATE =
sig
  structure GCS : ZIPPY_GOAL_CLUSTERS
  structure T : ZIPPY_GPOS_UPDATE_TARGET
  structure A : KLEISLI_ARROW
  where type ('p1, 't) K.M.t = ('p1, 't) T.t

  type 't gpos_update = (unit, GCS.goal_pos, 't) A.cat
  val id : GCS.goal_pos gpos_update
  val comp : 't gpos_update -> GCS.goal_pos gpos_update -> 't gpos_update
  val comp_pure : 't gpos_update -> (GCS.goal_pos -> GCS.goal_pos) -> 't gpos_update
  val pure_comp : (GCS.goal_pos -> 't) -> GCS.goal_pos gpos_update -> 't gpos_update

  val update : GCS.goal_pos -> 't T.target -> 't gpos_update -> 't gpos_update

  val gclusters_gcpos_update : GCS.gclusters -> GCS.goal_pos gpos_update -> GCS.gcpos gpos_update
end

functor Zippy_GPos_Update(
    structure GCS : ZIPPY_GOAL_CLUSTERS
    structure T : ZIPPY_GPOS_UPDATE_TARGET
  ) : ZIPPY_GPOS_UPDATE =
struct

structure GCS = GCS
structure T = T

type 't gpos_update = GCS.goal_pos -> 't T.target

structure A = Kleisli_Arrow(T)
val id = A.id ()

val comp = A.comp
fun comp_pure f g = f o g
fun pure_comp f g p = g p |> T.map f

fun update p = General_Util.fun_update (equal p)

fun gclusters_gcpos_update gclusters = pure_comp (GCS.get_gcpos_index gclusters)

end
